name: Supabase Cloud Pipeline (Dev ‚Üí Prod)

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

jobs:
  deploy-to-dev:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Deploy to Development Supabase
        run: |
          echo "üöÄ Deploying to Development Environment"
          
          # Link to dev project
          supabase link --project-ref ${{ secrets.SUPABASE_DEV_PROJECT_REF }}
          
          # List current migrations
          echo "üìã Current migration status:"
          supabase migration list --db-url "${{ secrets.SUPABASE_DEV_DB_URL }}" || echo "Could not list migrations"
          
          # Deploy database migrations
          echo "üóÑÔ∏è Applying database migrations..."
          
          # Check if we have a direct DB URL (non-pooler)
          if [[ "${{ secrets.SUPABASE_DEV_DB_URL }}" == *"pooler"* ]]; then
            echo "‚ö†Ô∏è WARNING: Using pooler URL for migrations. This may cause issues."
            echo "Consider adding SUPABASE_DEV_DIRECT_URL secret with direct database URL."
          fi
          
          # Try to use direct URL if available, otherwise fall back to regular URL
          DB_URL="${{ secrets.SUPABASE_DEV_DIRECT_URL || secrets.SUPABASE_DEV_DB_URL }}"
          
          # First, try to apply migrations
          if ! supabase db push --db-url "$DB_URL"; then
            echo "‚ö†Ô∏è Migration failed! Error details above."
            echo "This often happens with pooler connections."
            
            # If we have a service role key, try using the management API as fallback
            if [ -n "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" ]; then
              echo "üîÑ Attempting alternative migration method..."
              
              # List SQL files to apply
              echo "üìù Migration files to apply:"
              ls -la supabase/migrations/*.sql | grep -v archive || echo "No migration files found"
              
              echo ""
              echo "‚ö†Ô∏è IMPORTANT: Migrations could not be applied automatically."
              echo "Please run these manually in Supabase SQL Editor:"
              for file in supabase/migrations/*.sql; do
                if [[ -f "$file" && ! "$file" =~ "archive" ]]; then
                  echo "  - $(basename "$file")"
                fi
              done
            fi
            
            echo ""
            echo "Continuing deployment without migrations..."
            echo "Use the manual migration workflow: Actions ‚Üí Run Database Migrations"
          else
            echo "‚úÖ Migrations applied successfully!"
          fi
          
          echo "‚úÖ Database migrations applied successfully!"
          
          # Verify migration status
          echo "üìä Post-migration status:"
          supabase migration list --db-url "${{ secrets.SUPABASE_DEV_DB_URL }}" || true
          
          # Deploy Edge Functions
          echo "‚ö° Deploying Edge Functions..."
          supabase functions deploy calloff-crud --project-ref ${{ secrets.SUPABASE_DEV_PROJECT_REF }}
          
          echo "‚úÖ Development deployment complete!"
          echo "Test at: https://pxwtdaqhwzweedflwora.supabase.co"

  deploy-to-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Deploy to Production Supabase
        run: |
          echo "üöÄ Deploying to Production Environment"
          
          # Link to production project
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          
          # List current migrations
          echo "üìã Current migration status:"
          supabase migration list --db-url "${{ secrets.SUPABASE_DB_URL }}" || echo "Could not list migrations"
          
          # Deploy database migrations (fail on error)
          echo "üóÑÔ∏è Applying database migrations..."
          
          # Check if we have a direct DB URL (non-pooler)
          if [[ "${{ secrets.SUPABASE_DB_URL }}" == *"pooler"* ]]; then
            echo "‚ö†Ô∏è WARNING: Using pooler URL for migrations. This may cause issues."
            echo "Consider adding SUPABASE_DIRECT_URL secret with direct database URL."
          fi
          
          # Try to use direct URL if available, otherwise fall back to regular URL
          DB_URL="${{ secrets.SUPABASE_DIRECT_URL || secrets.SUPABASE_DB_URL }}"
          
          if ! supabase db push --db-url "$DB_URL"; then
            echo "‚ùå Migration failed! Check the migration files for errors."
            echo "Hint: The error above shows which migration failed."
            echo "‚ö†Ô∏è  IMPORTANT: Production deployment stopped to prevent issues."
            exit 1
          fi
          
          echo "‚úÖ Database migrations applied successfully!"
          
          # Verify migration status
          echo "üìä Post-migration status:"
          supabase migration list --db-url "${{ secrets.SUPABASE_DB_URL }}" || true
          
          # Deploy Edge Functions
          echo "‚ö° Deploying Edge Functions..."
          supabase functions deploy calloff-crud --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          
          echo "‚úÖ Production deployment complete!"
          echo "Live at: https://brixbdbunhwlhuwunqxw.supabase.co"